import sys
import os
lib_path = os.path.abspath('lib')
sys.path.append(lib_path)
# print(sys.path)
from canal import *
import numpy as np

canal = {
    "length": 20,
    "delta x": 0.02,
    "base width": 1.0,
    "z bed": 0.0,
    "angle": 90, 
    "manning": 0.00,
    "initial mode": "DAMBREAK",
    "entropy fix": "True",
    "CFL": 0.9,
    "end time": 0.4,
    "output freq": 1
}

dambreak = {
    "position": 10,
    "left height": 10,
    "right height": 1,
    "left u": 0,
    "right u": 0,
    "left w": 0.0,
    "right w": 0.0,
    "exact": "False"
}

h_results

n = int(canal["length"]/canal["delta x"])
resampled_h_results = np.interp(np.linspace(0, canal["length"],n), np.linspace(0, canal["length"],len(h_results)), h_results)

h_results = resampled_h_results


# define index points

dambreak_index = int(dambreak["position"]/canal["delta x"])
delta_index = int(n/50)

# print(dambreak_index, delta_index)

def mean_error(h_results:np.ndarray, h_exact:np.ndarray)->float:
    # return np.sum(np.sqrt((h_results - h_exact)**2))/len(h_results)
    return np.sum(np.abs(h_results - h_exact))/len(h_results)


def test_dam_break_waves():
    river = Canal(test=True, canal=canal, case=dambreak)
    river.temporal_loop(mode='wave')
    a = h_results[dambreak_index - delta_index:dambreak_index + delta_index]/np.max(h_results)
    b = river.h[dambreak_index - delta_index:dambreak_index + delta_index]/np.max(h_results)

    error = mean_error(a, b)
    print("Error: ", error)
    # plt.plot(river.h)
    # plt.plot(h_results) 
    # plt.show()

    assert error < 3e-3

def test_dam_break_fluxes():
    river = Canal(test=True, canal=canal, case=dambreak)
    river.temporal_loop(mode='flux')
    a = h_results[dambreak_index - delta_index:dambreak_index + delta_index]/np.max(h_results)
    b = river.h[dambreak_index - delta_index:dambreak_index + delta_index]/np.max(h_results)
    error = mean_error(a, b)
    assert error < 3e-3


if __name__ == '__main__':
    test_dam_break_waves()
    test_dam_break_fluxes()
    print("All tests passed!")